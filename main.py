from flask import Flask
import threading
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, Filters

# Telegram Token ‡¶è‡¶¨‡¶Ç Admin ID
TOKEN = "7463988311:AAHNpqounyuEsZsOs9G8dOWlyH4MqyiqA7o"   # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶ì
ADMIN_ID = 7647930808               # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶∏‡¶æ‡¶ì

# ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
user_notification_permission = {}

# Flask App for Keep Alive
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ Bot is Alive!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = threading.Thread(target=run_flask)
    thread.start()

# Logging ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# START Command
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = InlineKeyboardButton("ü§ùüèª Accept Agreement", callback_data='accept_agreement')
    agreement_msg = (
        f"üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã *{user.first_name}*!\n\n"
        "‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ Terms & Conditions ‡¶Æ‡ßá‡¶®‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§\n"
        "üëâ ‡¶®‡¶ø‡¶ö‡ßá Accept ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®‡•§"
    )
    update.message.reply_text(
        agreement_msg,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

# Button Callback Handler
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()

    if query.data == 'accept_agreement':
        keyboard = [
            [InlineKeyboardButton("‚úÖ Allow Notifications", callback_data='allow_notifications')],
            [InlineKeyboardButton("‚ùå Decline", callback_data='decline_notifications')]
        ]
        query.edit_message_text(
            "‚úÖ Agreement Accepted!\n\n"
            "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == 'allow_notifications':
        user_notification_permission[user_id] = True
        query.edit_message_text("üîî Notifications Enabled!")
    elif query.data == 'decline_notifications':
        user_notification_permission[user_id] = False
        query.edit_message_text("üö´ Notifications Disabled.")

# Admin Broadcast with Image + Text + Button
def broadcast(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return

    if not context.args or '|' not in ' '.join(context.args):
        update.message.reply_text(
            "‚ùó ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§\n"
            "‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n"
            "/broadcast <image_url> | <caption> | <button_text> | <button_url>"
        )
        return

    try:
        raw = ' '.join(context.args)
        image_url, caption, button_text, button_url = map(str.strip, raw.split('|', 3))

        keyboard = InlineKeyboardButton(button_text, url=button_url)
        markup = InlineKeyboardMarkup(keyboard)

        count = 0
        for uid, allowed in user_notification_permission.items():
            if allowed:
                try:
                    context.bot.send_photo(
                        chat_id=uid,
                        photo=image_url,
                        caption=f"üì¢ {caption}",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=markup
                    )
                    count += 1
                except Exception as e:
                    logging.error(f"Couldn't send to {uid}: {e}")
                    continue

        update.message.reply_text(f"‚úÖ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá {count} ‡¶ú‡¶®‡¶ï‡ßá‡•§")

    except Exception as e:
        update.message.reply_text("‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≤‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        logging.error("Broadcast error:", exc_info=e)

# Help
def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "/start - ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ\n"
        "/help - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø\n"
        "/broadcast <image_url> | <caption> | <button_text> | <button_url> - (Admin only)"
    )

# Error Logger
def error_handler(update: object, context: CallbackContext):
    logging.error(msg="Error:", exc_info=context.error)

# Main Bot Runner
def main():
    keep_alive()  # Flask Keep Alive ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßã
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(CommandHandler("broadcast", broadcast, Filters.user(user_id=ADMIN_ID), pass_args=True))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_error_handler(error_handler)

    updater.start_polling()
    logging.info("ü§ñ Bot is running...")
    updater.idle()

if __name__ == '__main__':
    main()
